// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum USER_ROLE {
  USER
  COMPTA
  ADMIN
}

enum USER_STATUS {
  REGISTRATION_IN_PROGRESS
  ALLOWED
  BANNED
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firstname                  String
  lastname                   String
  phoneNumber                String      @unique
  email                      String      @unique
  birthDate                  DateTime
  passwordHash               String
  twoFactorSecret            String?
  twoFactorVerified          Boolean     @default(value: false)
  twoFactorRecoverHash       String?
  emailVerified              Boolean     @default(value: false)
  currentEmailVerificationId Int?        @unique
  role                       USER_ROLE   @default(value: USER)
  optIn                      Boolean
  termsOfService             Boolean
  registerDate               DateTime    @default(now())
  status                     USER_STATUS @default(value: REGISTRATION_IN_PROGRESS)
  antiPhishingCode           String?
  antiPhishingCodeExpiration DateTime    @default(now())

  // Virtuals fields
  currentEmailVerification    EmailVerificationCode?        @relation(fields: [currentEmailVerificationId], references: [id])
  passwordVerificationRequest PasswordVerificationRequest[]
  tags                        TagsOnUsers[]
}

enum EMAIL_VERIFICATION_STATUS {
  ERROR
  PENDING
  VERIFIED
  EXPIRED
}

model EmailVerificationCode {
  id               Int                       @id @default(autoincrement())
  code             String
  expiration       DateTime
  status           EMAIL_VERIFICATION_STATUS @default(value: PENDING)
  user             User?
  numberOfAttempts Int                       @default(value: 0)
}

model PasswordVerificationRequest {
  id         Int                       @id @default(autoincrement())
  userId     Int
  token      String                    @unique
  expiration DateTime
  createdAt  DateTime                  @default(now())
  updatedAt  DateTime                  @updatedAt
  status     EMAIL_VERIFICATION_STATUS @default(value: PENDING)

  // Virtuals fields
  user User @relation(fields: [userId], references: [id])
}

model Tag {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  color       String
  description String?

  // Virtuals fields
  users TagsOnUsers[]
}

model TagsOnUsers {
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId  Int
  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@id([tagId, userId])
}

enum INVOICE_STATUS {
  DRAFT
  UNPAID
  PAID
  BAD_DEBT
}

model InvoiceRow {
  id           Int    @id @default(autoincrement())
  description  String
  // TODO passer en string
  // In Cent
  amount       Int
  // In Cent
  pricePerUnit Int
  invoiceId    Int

  // Virtuals fields
  Invoice Invoice @relation(fields: [invoiceId], references: [id])
}

model Invoice {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status         INVOICE_STATUS
  comptabilityId Int?
  validatedAt    DateTime?
  description    String
  currency       String
  pdfDocumentUrl String?

  companyId Int

  // Virtuals fields
  rows                   InvoiceRow[]
  company                Company                  @relation(fields: [companyId], references: [id])
  transactions           Transaction[]
  InvoicesOnTransactions InvoicesOnTransactions[]
}

model InvoicesOnTransactions {
  invoice       Invoice     @relation(fields: [invoiceId], references: [id])
  invoiceId     Int
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId Int
  assignedAt    DateTime    @default(now())
  assignedBy    Int

  @@id([invoiceId, transactionId])
}

model Company {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  externalBankDataProviderId String?

  name String
  type String

  // Virtuals fields
  transactions Transaction[]
  bankAccount  BankAccount[]
  bank         Bank[]
  invoice      Invoice[]
}

enum TRANSACTION_MODE {
  NORMAL
  FEE
  TRANSFER
}

model Transaction {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  externalId        String   @unique
  externalCreatedAt DateTime

  //In Cent
  amount      Int
  currency    String
  madeOn      DateTime
  description String
  isCrypto    Boolean
  mode        TRANSACTION_MODE

  bankAccountId Int
  bankId        Int
  companyId     Int

  // Virtuals fields
  account                BankAccount              @relation(fields: [bankAccountId], references: [id])
  bank                   Bank                     @relation(fields: [bankId], references: [id])
  company                Company                  @relation(fields: [companyId], references: [id])
  expenseJustification   ExpenseJustification?
  invoices               Invoice[]
  InvoicesOnTransactions InvoicesOnTransactions[]
}

model BankAccount {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  externalId String @unique

  name     String
  nature   String
  // In Cent
  balance  Int
  currency String

  bankId    Int
  companyId Int

  // Virtuals fields
  bank         Bank          @relation(fields: [bankId], references: [id])
  company      Company       @relation(fields: [companyId], references: [id])
  transactions Transaction[]
}

model Bank {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  externalId String @unique

  providerId   String
  providerCode String
  providerName String

  companyId Int

  // Virtuals fields
  accounts     BankAccount[]
  transactions Transaction[]
  company      Company       @relation(fields: [companyId], references: [id])
}

model ExpenseJustification {
  // will be same as transactionId
  id        Int      @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  description   String
  // in cent
  deductibleVAT Int

  // Virtuals fields
  expenseDocuments ExpenseDocument[]
  transaction      Transaction       @relation(fields: [id], references: [id])
}

model ExpenseDocument {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  contentType String
  url         String

  expenseJustificationId Int

  // Virtuals fields
  expenseJustification ExpenseJustification @relation(fields: [expenseJustificationId], references: [id])
}
